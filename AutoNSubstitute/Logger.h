#pragma once

#ifndef LOGGER_H
#define LOGGER_H

#include "ILogger.h"
#include "LoggerMultiton.h"
#include "LogEntry.h"

#include <memory>
#include <string>

/*
* Log messages generated by the code
*/
class Logger : public ILogger
{
public:
	// TODO Destructor is public because of shared pointer. Investigate make_shared?
	~Logger();

	void log(const std::string& logLevel, const std::string& message);
	std::ostream& write(std::ostream& os) const;

private:
	Logger();
	// Declare LoggerMultiton as friend to allow it to construct a Logger instance
	friend std::shared_ptr<ILogger> LoggerMultiton::getLogger(const std::string& key);

	std::vector<LogEntry> m_messages;
};

#endif
